name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      matrix:
        go-version: [ 1.22.x, 1.23.x ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then 
          echo "Code is not formatted. Run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi
      if: matrix.os == 'ubuntu-latest'
      
    - name: Vet
      run: go vet ./...
      
    - name: Test with coverage
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23.x'
      with:
        file: ./coverage.out

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.23.x
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
